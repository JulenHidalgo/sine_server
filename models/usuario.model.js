// Importar la configuraci√≥n de la base de datos
const db = require("../config/database");

// Definici√≥n de la clase Usuario
class Usuario {
  // M√©todo para obtener todos los usuarios
  static async obtenerTodos() {
    try {
      console.log("üîç Ejecutando consulta: SELECT * FROM usuario");
      const [rows] = await db.query("SELECT * FROM usuario");
      console.log("‚úÖ Usuarios encontrados:", rows);
      return rows;
    } catch (err) {
      console.error("‚ùå Error en la consulta SQL:", err.message);
      throw err;
    }
  }

  // M√©todo para obtener solo los usuarios que est√°n activos
  static async obtenerActivos() {
    try {
      console.log(
        "üîç Ejecutando consulta: SELECT * FROM usuario WHERE activo = 1"
      );
      const [rows] = await db.query("SELECT * FROM usuario WHERE activo = 1");
      console.log("‚úÖ Usuarios activos encontrados:", rows);
      return rows;
    } catch (err) {
      console.error("‚ùå Error en la consulta SQL:", err.message);
      throw err;
    }
  }

  // M√©todo para crear un nuevo usuario
  static async crear(usuario) {
    try {
      console.log("üîç Insertando usuario con nombre:", usuario.nombre);

      // Validaci√≥n: el nombre del usuario no puede estar vac√≠o
      if (!usuario || !usuario.nombre) {
        console.log("‚ùå Error: El nombre es undefined o vac√≠o.");
        throw new Error("El nombre del usuario no puede estar vac√≠o.");
      }

      // Consulta para insertar un nuevo usuario, con estado activo por defecto
      const sql = "INSERT INTO usuario (nombre, activo) VALUES (?, 1)";
      const [result] = await db.query(sql, [usuario.nombre]);

      // Asignar el ID generado por la base de datos al objeto usuario
      usuario.id = result.insertId;
      console.log("‚úÖ Usuario insertado con ID:", usuario.id);
      return usuario;
    } catch (err) {
      console.error("‚ùå Error insertando usuario:", err.message);
      throw err;
    }
  }

  // M√©todo para modificar el estado (activo/inactivo) de un usuario existente
  static async modificar(usuario) {
    try {
      console.log(
        "üîç Modificando usuario ID:",
        usuario.id,
        "Estado:",
        usuario.activo
      );
      const sql = "UPDATE usuario SET activo = ? WHERE id = ?";
      const [result] = await db.query(sql, [usuario.activo, usuario.id]);

      // Verificar si se modific√≥ alg√∫n registro
      if (result.affectedRows === 0) {
        console.log("‚ùå Usuario no encontrado:", usuario.id);
        return null;
      }

      console.log("‚úÖ Usuario actualizado correctamente.");
      return usuario;
    } catch (err) {
      console.error("‚ùå Error modificando usuario:", err.message);
      throw err;
    }
  }
}

// Exportar la clase para su uso en otras partes del proyecto
module.exports = Usuario;
